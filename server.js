const express = require('express');
const cors = require('cors');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.static(path.join(__dirname)));

// Claude API configuration
const CLAUDE_API_KEY = process.env.CLAUDE_API_KEY;
const CLAUDE_MODEL = process.env.CLAUDE_MODEL || 'claude-sonnet-4-20250514';
const CLAUDE_MAX_TOKENS = parseInt(process.env.CLAUDE_MAX_TOKENS) || 600;
const CLAUDE_TEMPERATURE = parseFloat(process.env.CLAUDE_TEMPERATURE) || 0.3;

// Validate API key
if (!CLAUDE_API_KEY || CLAUDE_API_KEY === 'your_actual_claude_api_key_here') {
    console.error('❌ Claude API key not configured. Please set CLAUDE_API_KEY in your .env file');
    process.exit(1);
}

// Claude API endpoint
app.post('/api/analyze', async (req, res) => {
    try {
        const { prompt, groundTruth, xaiGenerated, metadata, images } = req.body;

        // Validate required fields
        if (!prompt || !groundTruth || !xaiGenerated || !metadata) {
            return res.status(400).json({
                error: 'Missing required fields: prompt, groundTruth, xaiGenerated, metadata'
            });
        }

        // Prepare the analysis prompt
        const analysisPrompt = prepareAnalysisPrompt(prompt, groundTruth, xaiGenerated, metadata, images);

        // Call Claude API
        const response = await callClaudeAPI(analysisPrompt);

        res.json({
            success: true,
            analysis: response,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('Analysis error:', error);
        res.status(500).json({
            error: 'Failed to analyze data',
            details: error.message
        });
    }
});

// Helper function to extract media type from base64 data URL
function getMediaTypeFromDataUrl(dataUrl) {
    const match = dataUrl.match(/^data:([^;]+);base64,/);
    return match ? match[1] : 'image/jpeg'; // Default to jpeg if no match
}

function prepareAnalysisPrompt(prompt, groundTruth, xaiGenerated, metadata, images) {
    const base64Images = [];
    let imageDescriptions = [];
    
    console.log('Images received:', Object.keys(images));
    console.log('Original image exists:', !!images.original);
    console.log('Heatmap image exists:', !!images.heatmap);
    
    if (images.original) {
        const mediaType = getMediaTypeFromDataUrl(images.original);
        base64Images.push({
            type: "image",
            source: {
                type: "base64",
                media_type: mediaType,
                data: images.original.split(',')[1] // Remove data:image/jpeg;base64, prefix
            }
        });
        imageDescriptions.push("**Original Image (Image 1)** is the source image that was analyzed by the XAI technique.");
    }
    
    if (images.heatmap) {
        const mediaType = getMediaTypeFromDataUrl(images.heatmap);
        base64Images.push({
            type: "image",
            source: {
                type: "base64",
                media_type: mediaType,
                data: images.heatmap.split(',')[1] // Remove data:image/jpeg;base64, prefix
            }
        });
        imageDescriptions.push("**XAI Generated Heatmap (Image 2)** is the heatmap generated by the ${metadata.xaiTechnique} technique, showing which regions the model focused on.");
    }

    const systemPrompt = `You are an expert in Explainable AI (XAI) and computer vision analysis. Your task is to analyze discrepancies between ground truth bounding boxes and XAI-generated bounding boxes to identify root causes of failures.

Key Analysis Points:
1. **Coordinate Comparison**: Compare the ground truth and XAI-generated bounding box coordinates
2. **Visual Analysis**: Examine the original image and XAI heatmap for visual cues
3. **Technique-Specific Issues**: Consider the specific XAI technique used and its known limitations
4. **Model Architecture Impact**: Analyze how the model architecture might affect XAI performance
5. **Dataset Characteristics**: Consider dataset-specific factors that might influence results`
    const userPrompt = `
${prompt}

**Image Descriptions:**
${imageDescriptions.join('\n')}

**Ground Truth Bounding Box:**
- Top-left: (${groundTruth.x1}, ${groundTruth.y1})
- Bottom-right: (${groundTruth.x2}, ${groundTruth.y2})

**XAI Generated Bounding Box:**
- Top-left: (${xaiGenerated.x1}, ${xaiGenerated.y1})
- Bottom-right: (${xaiGenerated.x2}, ${xaiGenerated.y2})

**Metadata:**
- XAI Technique: ${metadata.xaiTechnique}
- Model Architecture: ${metadata.modelArchitecture}
- Dataset: ${metadata.dataset}

Please provide a comprehensive analysis of the root cause of the discrepancy between these bounding boxes. When referring to the images, clearly specify whether you're discussing the original image or the XAI heatmap.`;

    return {
        system: systemPrompt,
        user: userPrompt,
        images: base64Images
    };
}

async function callClaudeAPI(promptData) {
    const url = 'https://api.anthropic.com/v1/messages';
    
    const requestBody = {
        model: CLAUDE_MODEL,
        max_tokens: CLAUDE_MAX_TOKENS,
        temperature: CLAUDE_TEMPERATURE,
        messages: [
            {
                role: "user",
                content: [
                    {
                        type: "text",
                        text: promptData.user
                    },
                    ...promptData.images
                ]
            }
        ],
        system: promptData.system
    };

    console.log('Request Body:', JSON.stringify(requestBody, null, 2));
    console.log('API Key (first 10 chars):', CLAUDE_API_KEY.substring(0, 10) + '...');

    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'x-api-key': CLAUDE_API_KEY,
            'anthropic-version': '2023-06-01'
        },
        body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
        const errorData = await response.text();
        console.error(`Claude API Error Details:`);
        console.error(`Status: ${response.status}`);
        console.error(`Status Text: ${response.statusText}`);
        console.error(`Response: ${errorData}`);
        throw new Error(`Claude API error: ${response.status} - ${errorData}`);
    }

    const data = await response.json();
    return data.content[0].text;
}

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        claude_configured: !!CLAUDE_API_KEY && CLAUDE_API_KEY !== 'your_actual_claude_api_key_here'
    });
});

// Serve the main page
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Start server
app.listen(PORT, () => {
    console.log(`🚀 Server running on http://localhost:${PORT}`);
    console.log(`📊 Health check: http://localhost:${PORT}/api/health`);
    console.log(`🔑 Claude API configured: ${!!CLAUDE_API_KEY && CLAUDE_API_KEY !== 'your_actual_claude_api_key_here'}`);
});

module.exports = app; 